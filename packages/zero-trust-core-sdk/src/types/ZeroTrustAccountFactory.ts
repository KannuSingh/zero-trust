/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	BytesLike,
	ContractMethod,
	ContractRunner,
	FunctionFragment,
	Interface,
	Listener,
	Result,
} from "ethers";
import type {
	TypedContractEvent,
	TypedContractMethod,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedListener,
} from "./common";

export interface ZeroTrustAccountFactoryInterface extends Interface {
	getFunction(
		nameOrSignature:
			| "accountImplementation"
			| "createAccount"
			| "getCounterfactualAddress",
	): FunctionFragment;

	encodeFunctionData(
		functionFragment: "accountImplementation",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "createAccount",
		values: [BigNumberish, BigNumberish, BigNumberish, BytesLike],
	): string;
	encodeFunctionData(
		functionFragment: "getCounterfactualAddress",
		values: [BigNumberish, BigNumberish, BigNumberish, BytesLike],
	): string;

	decodeFunctionResult(
		functionFragment: "accountImplementation",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "createAccount",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "getCounterfactualAddress",
		data: BytesLike,
	): Result;
}

export interface ZeroTrustAccountFactory extends BaseContract {
	connect(runner?: ContractRunner | null): ZeroTrustAccountFactory;
	waitForDeployment(): Promise<this>;

	interface: ZeroTrustAccountFactoryInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>,
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>,
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>,
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>,
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent,
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent,
	): Promise<this>;

	accountImplementation: TypedContractMethod<[], [string], "view">;

	createAccount: TypedContractMethod<
		[
			pubKeyX: BigNumberish,
			pubKeyY: BigNumberish,
			salt: BigNumberish,
			credentialId: BytesLike,
		],
		[string],
		"nonpayable"
	>;

	getCounterfactualAddress: TypedContractMethod<
		[
			pubKeyX: BigNumberish,
			pubKeyY: BigNumberish,
			salt: BigNumberish,
			credentialId: BytesLike,
		],
		[string],
		"view"
	>;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment,
	): T;

	getFunction(
		nameOrSignature: "accountImplementation",
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "createAccount",
	): TypedContractMethod<
		[
			pubKeyX: BigNumberish,
			pubKeyY: BigNumberish,
			salt: BigNumberish,
			credentialId: BytesLike,
		],
		[string],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "getCounterfactualAddress",
	): TypedContractMethod<
		[
			pubKeyX: BigNumberish,
			pubKeyY: BigNumberish,
			salt: BigNumberish,
			credentialId: BytesLike,
		],
		[string],
		"view"
	>;

	filters: {};
}
